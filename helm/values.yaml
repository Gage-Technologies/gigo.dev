# Default values for helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

development_mode: false

core:
  replicaCount: 3

  image:
    repository: samulrich/gigo-core
    pullPolicy: IfNotPresent
    tag: "ws"
    imagePullSecrets: []

  nodeSelector: {}
  tolerations: {}

  service:
    enable: true
    type: ClusterIP
    sessionAffinity: ClientIP
    externalTrafficPolicy: Cluster
    loadBalancerIP: ""
    annotations: {}
    port: 80

  ingress:
    enable: true
    className: ""
    host: "gigo.gage.intranet"
    wildcardHost: "*.gigo.gage.intranet"
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 100m
    tls:
      enable: false
      secretName: ""
      wildcardSecretName: ""

  certs:
    secrets: []

  resources: {}

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: gigo/component
                  operator: In
                  values:
                    - "core"
            topologyKey: kubernetes.io/hostname
          weight: 1

  config:
    cluster: true
    derp_mesh_key: secret://derp-mesh-key
    node_id: 0
    access_url: http://gigo.gage.intranet/
    logger_id: "prod"
    stripe_key: "secret://gigo-stripekey"
    storage_config:
      engine: s3
      s3:
        bucket: gigo-core
        region: us-east-1
        access_key: gigo
        secret_key: secret://gigo-corebucket
        endpoint: minio
    http_server_config:
      hostname: gigo.gage.intranet
      domain: gage.intranet
      address: "0.0.0.0"
      port: "80"
      development_mode: false
      git_webhook_secret: "secret://gigo-gitwebhook"
      stripe_webhook_secret: "secret://gigo-stripewebhook"
    ti_config:
      db_host: "tidb"
      db_port: "4000"
      db_name: "gigo"
      db_user: "gigo"
      db_password: "secret://gigo-tidb"
    etcd_config:
      hosts:
        - http://etcd:2379
      username: gigo
      password: "secret://gigo-etcd"
    elastic_config:
      elastic_nodes:
        - "elastic"
      elastic_pass: "secret://gigo-elastic"
    redis_config:
      redis_nodes:
        - "redis"
      redis_db: 8
      redis_type: "local"
      redis_pass: "secret://gigo-redis"
    gitea_config:
      host_url: "gitea"
      username: "gigo"
      password: "secret://gigo-gitea"
    ws_config:
      - host: gigo-ws-service.gigo.svc.cluster.local
        port: 45246
    derp:
      server:
        enable: true
    jetstream_config:
      host: "jetstream"
      port: 4222
      username: "gigo"
      password: "secret://gigo-jetstream"
      max_pub_queue: 256
    meili_config:
      host: meili
      token: secret://gigo-meili
      indices:
        posts:
          name: posts
          primary_key: _id
          update_config: false
          searchable_attributes:
            - title
            - description
            - author
          filterable_attributes:
            - languages
            - attempts
            - completions
            - coffee
            - views
            - tags
            - post_type
            - visibility
            - created_at
            - updated_at
            - published
            - tier
            - author_id
          sortable_attributes:
            - attempts
            - completions
            - coffee
            - views
            - created_at
            - updated_at
            - tier
            - _id
        users:
          name: users
          primary_key: _id
          update_config: false
          searchable_attributes:
            - user_name
          sortable_attributes:
            - _id
        tags:
          name: tags
          primary_key: _id
          update_config: false
          searchable_attributes:
            - value
          filterable_attributes:
            - official
          sortable_attributes:
            - _id
            - official
        discussion:
          name: discussion
          primary_key: _id
          update_config: false
          searchable_attributes:
            - body
            - author
            - title
          filterable_attributes:
            - author_id
            - created_at
            - updated_at
            - author_tier
            - awards
            - coffee
            - post_id
            - tags
          sortable_attributes:
            - _id
            - created_at
            - updated_at
            - author_tier
            - coffee
        comment:
          name: comment
          primary_key: _id
          update_config: false
          searchable_attributes:
            - body
            - author
          filterable_attributes:
            - author_id
            - created_at
            - author_tier
            - awards
            - coffee
            - discussion_id
            - lead
          sortable_attributes:
            - _id
            - created_at
            - author_tier
            - coffee
            - lead
        thread_comment:
          name: thread_comment
          primary_key: _id
          update_config: false
          searchable_attributes:
            - body
            - author
          filterable_attributes:
            - author_id
            - created_at
            - author_tier
            - awards
            - coffee
            - discussion_id
            - lead
          sortable_attributes:
            - _id
            - created_at
            - author_tier
            - coffee
            - lead
        workspace_configs:
          name: workspace_configs
          primary_key: _id
          update_config: false
          searchable_attributes:
            - title
            - description
            - content
          filterable_attributes:
            - author_id
            - revision
            - official
            - tags
            - languages
          sortable_attributes:
            - _id
            - revision
            - official

ws:
  replicaCount: 3

  image:
    repository: samulrich/gigo-ws
    pullPolicy: IfNotPresent
    tag: "latest"
    imagePullSecrets: []

  nodeSelector: {}
  tolerations: {}

  serviceAccount:
    annotations: {}

  service:
    enable: true
    type: ClusterIP
    sessionAffinity: ClientIP
    externalTrafficPolicy: Cluster
    loadBalancerIP: ""
    annotations: {}
    port: 45246

  certs:
    secrets: []

  resources: {}

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: gigo/component
                  operator: In
                  values:
                    - "ws"
            topologyKey: kubernetes.io/hostname
          weight: 1

  config:
    provisioner:
      # directory for the terraform binary
      terraform_dir: /tmp/tfbin
      # version of terraform to use
      terraform_version: 1.3.7
      # whether to overwrite the terraform binary silently
      overwrite: true
      # terraform provisioner backend
      backend:
        # 0 is used for local filesystem and 1 for s3 based storage
        provisioner_backend_type: 1
        # for s3 based storage
        s3:
          bucket: gigo-provisioner
          region: us-east-1
          access_key: gigo
          secret_key: secret://gigo-wsbucket
          endpoint: minio
          use_ssl: false
        # use an insecure version of s3 like a local minio deployment
        insecure_s3: true
    # storage for persisting terraform modules
    module_storage:
      engine: s3
      s3:
        bucket: gigo-provisioner
        region: us-east-1
        access_key: gigo
        secret_key: secret://gigo-wsbucket
        endpoint: minio
    server:
      host: 0.0.0.0
      port: 45246
    logger:
      es:
        elastic_nodes:
          - "elastic"
        username: gigo
        elastic_pass: secret://gigo-elastic
        index: gigo-ws
        batch_size: 250
        batch_time_millis: 1000

